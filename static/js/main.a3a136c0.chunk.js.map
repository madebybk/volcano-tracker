{"version":3,"sources":["components/Header.js","components/VolcanoLocations.js","components/VolcanoInfoBox.js","components/Map.js","components/loading.gif","components/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","icon","volcanoIcon","VolcanoLocations","lat","lng","onClick","VolcanoInfoBox","volcanoInfo","title","id","href","sources","url","target","rel","require","config","Map","center","zoom","eventData","useState","setVolcanoInfo","volcanoMarkers","map","ev","categories","geometries","coordinates","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","defaultProps","Loader","src","loader","alt","App","setEventData","loading","setLoading","useEffect","a","fetchEvents","events","getEvents","fetch","res","json","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAeeA,EARA,WACX,OACI,wBAAQC,UAAU,SAAlB,SACI,+BAAI,cAAC,OAAD,CAAMC,KAAMC,MAAhB,8C,QCKGC,EAZU,SAAC,GAA0B,EAAxBC,IAAwB,EAAnBC,IAAoB,IAAfC,EAAc,EAAdA,QAKlC,OACI,qBAAKN,UAAU,oBAAoBM,QAASA,EAA5C,SACI,cAAC,OAAD,CAAML,KAAMC,IAAaF,UAAU,oBCMhCO,EAhBQ,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAKtB,OACI,sBAAKR,UAAU,mBAAf,UACI,6BAAKQ,EAAYC,QACjB,+BACI,sCAAQ,iCAASD,EAAYE,QAC7B,6BAAI,mBAAGC,KAAMH,EAAYI,QAAQC,IAAKC,OAAO,SAASC,IAAI,aAAtD,iCCLpBC,EAAQ,IAAUC,SAClB,IAOMC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACzB,EAAsCC,mBAAS,MAA/C,mBAAOd,EAAP,KAAoBe,EAApB,KAEMC,EAAiBH,EAAUI,KAAI,SAACC,GAElC,OAXc,KAUEA,EAAGC,WAAW,GAAGjB,GAEoB,kBAArCgB,EAAGE,WAAW,GAAGC,YAAY,GAAyB,KAC3D,cAAC,EAAD,CAAkBzB,IAAKsB,EAAGE,WAAW,GAAGC,YAAY,GAAIxB,IAAKqB,EAAGE,WAAW,GAAGC,YAAY,GAAIvB,QAAS,kBAAMiB,EAAe,CAAEb,GAAIgB,EAAGhB,GAAID,MAAOiB,EAAGjB,MAAOG,QAASc,EAAGd,QAAQ,QAElL,QAGX,OACI,qBAAKZ,UAAU,MAAf,SACI,eAAC,IAAD,CACI8B,iBAAkB,CAAEC,IAAKC,2CACzBC,cAAed,EACfe,YAAad,EACbd,QAAS,kBAAMiB,EAAe,OAJlC,UAMKC,EACAhB,GAAe,cAAC,EAAD,CAAgBA,YAAaA,UAO7DU,EAAIiB,aAAe,CACfhB,OAAQ,CACJf,IAAK,QACLC,IAAK,SAETe,KAAM,GAGKF,QCjDA,MAA0B,oCCc1BkB,EARA,WACX,OACI,qBAAKpC,UAAU,SAAf,SACI,qBAAKqC,IAAKC,EAAQC,IAAI,eCgCnBC,MAhCf,WAEE,MAAkClB,mBAAS,IAA3C,mBAAOD,EAAP,KAAkBoB,EAAlB,KACA,EAA8BnB,oBAAS,GAAvC,mBAAOoB,EAAP,KAAgBC,EAAhB,KAGAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,6DAChBF,GAAW,GADK,SAEKG,IAFL,OAEVC,EAFU,OAGhBN,EAAaM,GACbJ,GAAW,GAJK,2CAAH,qDAOfK,KACC,IAGH,IAAMF,EAAW,uCAAG,gCAAAD,EAAA,sEACAI,MAAM,mDADN,cACZC,EADY,gBAEOA,EAAIC,OAFX,uBAEVJ,EAFU,EAEVA,OAFU,kBAGXA,GAHW,2CAAH,qDAMjB,OACE,gCACE,cAAC,EAAD,IACEL,EAA0C,cAAC,EAAD,IAAhC,cAAC,EAAD,CAAKrB,UAAWA,QCxBnB+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.a3a136c0.chunk.js","sourcesContent":["import { Icon } from '@iconify/react';\nimport volcanoIcon from '@iconify-icons/noto-v1/volcano';\n\n/**\n * Header component contains a short title for the project and a\n * volcano icon from '@iconify' NPM module.\n */\nconst Header = () => {\n    return (\n        <header className=\"header\">\n            <h1><Icon icon={volcanoIcon} /> Volcano Tracker (built by @madebybk)</h1>\n        </header>\n    )\n}\n\nexport default Header\n","import { Icon } from '@iconify/react';\nimport volcanoIcon from '@iconify-icons/noto-v1/volcano';\n\nconst VolcanoLocations = ({ lat, lng, onClick }) => {\n    /**\n     * VolcanoLocations component displays a volcano icon, from iconify NPM module,\n     * at each volcano event location.\n     */\n    return (\n        <div className='volcano-locations' onClick={onClick}>\n            <Icon icon={volcanoIcon} className='volcano-icon' />\n        </div>\n    )\n}\n\nexport default VolcanoLocations\n","const VolcanoInfoBox = ({ volcanoInfo }) => {\n    /**\n     * VolcanoInfoBox is a display that contains event ID and a source link\n     * of each volcano event.\n     */\n    return (\n        <div className=\"volcano-info-box\">\n            <h2>{volcanoInfo.title}</h2>\n            <ul>\n                <li>ID: <strong>{volcanoInfo.id}</strong></li>\n                <li><a href={volcanoInfo.sources.url} target=\"_blank\" rel=\"noreferrer\">Learn More</a></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default VolcanoInfoBox\n","import { useState } from 'react';\nimport GoogleMapReact from \"google-map-react\";\nimport VolcanoLocations from \"./VolcanoLocations\";\nimport VolcanoInfoBox from './VolcanoInfoBox';\n\nrequire('dotenv').config() // dotenv NPM module to set up environment variables\nconst { REACT_APP_MAP_API_KEY } = process.env;\nconst VOLCANO_EVENT = 12; // Volcano ID from NASA API\n\n/**\n * Map component takes in eventData from NASA API and displays active\n * volcano events on Google Maps template from google-map-react NPM module.\n */\nconst Map = ({ center, zoom, eventData }) => {\n    const [volcanoInfo, setVolcanoInfo] = useState(null); // Info including ID, Title, and Source of each volcano\n    // Loop through each event and collects event coordinates of volcanoes\n    const volcanoMarkers = eventData.map((ev) => {\n        let volcanoID = ev.categories[0].id; // API ID\n        if (volcanoID === VOLCANO_EVENT) {\n            if (typeof (ev.geometries[0].coordinates[0]) !== 'number') return null; // If there are multiple coordinates\n            return <VolcanoLocations lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]} onClick={() => setVolcanoInfo({ id: ev.id, title: ev.title, sources: ev.sources[0] })} />\n        }\n        return null;\n    })\n\n    return (\n        <div className='map'>\n            <GoogleMapReact\n                bootstrapURLKeys={{ key: process.env.REACT_APP_MAP_API_KEY }} // Personal Google Maps Javascript license\n                defaultCenter={center}\n                defaultZoom={zoom}\n                onClick={() => setVolcanoInfo(null)}\n            >\n                {volcanoMarkers}\n                {volcanoInfo && <VolcanoInfoBox volcanoInfo={volcanoInfo} />}\n\n            </GoogleMapReact>\n        </div>\n    )\n}\n\nMap.defaultProps = {\n    center: {\n        lat: 37.5665,\n        lng: 126.9780\n    },\n    zoom: 6\n}\n\nexport default Map\n","export default __webpack_public_path__ + \"static/media/loading.17f0055f.gif\";","import loader from './loading.gif'\n\n/**\n * Loader component displays a loading gif when the app is\n * fetching data from API.\n */\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <img src={loader} alt=\"Loading\" />\n        </div>\n    )\n}\n\nexport default Loader\n","import { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Map from \"./components/Map\";\nimport Loader from './components/Loader';\n\n/**\n * This application uses google-map-react templating NPM package and\n * NASA API to track and display all active volcanoes in the world.\n */\nfunction App() {\n  // Initialize states\n  const [eventData, setEventData] = useState([]); // Consists of all event data from NASA API\n  const [loading, setLoading] = useState(false); // Whether the site is in a loading (fetching data) state\n\n  // Getting event data using fetchEvent() function\n  useEffect(() => {\n    const getEvents = async () => {\n      setLoading(true);\n      const events = await fetchEvents();\n      setEventData(events);\n      setLoading(false);\n    }\n\n    getEvents();\n  }, [])\n\n  // Fetch event data from NASA API\n  const fetchEvents = async () => {\n    const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events');\n    const { events } = await res.json();\n    return events;\n  }\n\n  return (\n    <div>\n      <Header />\n      {!loading ? <Map eventData={eventData} /> : <Loader />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}